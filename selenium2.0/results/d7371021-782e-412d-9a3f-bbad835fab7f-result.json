{"name": "test_purchase_of_goods", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"button[class*='RB62D']\"}\n  (Session info: chrome=126.0.6478.114); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x0139C1C3+27395]\n\t(No symbol) [0x01333DC4]\n\t(No symbol) [0x01231B7F]\n\t(No symbol) [0x01272C65]\n\t(No symbol) [0x01272D3B]\n\t(No symbol) [0x012AEC82]\n\t(No symbol) [0x012939E4]\n\t(No symbol) [0x012ACB24]\n\t(No symbol) [0x01293736]\n\t(No symbol) [0x01267541]\n\t(No symbol) [0x012680BD]\n\tGetHandleVerifier [0x01653A93+2876371]\n\tGetHandleVerifier [0x016A7F5D+3221661]\n\tGetHandleVerifier [0x0141D634+556916]\n\tGetHandleVerifier [0x0142474C+585868]\n\t(No symbol) [0x0133CE04]\n\t(No symbol) [0x01339818]\n\t(No symbol) [0x013399B7]\n\t(No symbol) [0x0132BF0E]\n\tBaseThreadInitThunk [0x76400419+25]\n\tRtlGetAppContainerNamedObjectPath [0x77C1662D+237]\n\tRtlGetAppContainerNamedObjectPath [0x77C165FD+189]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ce9798c332ad78d393ec482f53c6ac26\")>\n\n    def test_purchase_of_goods(browser):\n        \"\"\"\n        SMK-6. Purchase of goods\n        \"\"\"\n        # Переходим на адрес тестируемой страницы\n        browser.get(URL)\n    \n        # Ищем кнопку \"Принять\"\n        #button = browser.find_element(By.CSS_SELECTOR, value=\"div[class*='AgreementCookie'] button[class*='blue-primary']\")\n    \n        time.sleep(5)\n    \n        # Проверяем текст на кнопке\n        #assert button.text == 'Принять', \"Unexpected text on button\"\n        # Кликаем по кнопке\n        #button.click()\n    \n        # Ищем кнопку \"Аккаунт\"\n        button = browser.find_element(By.CSS_SELECTOR, value='span.userToolsText')\n        # Проверяем текст на кнопке\n        assert button.text == 'Аккаунт', \"Unexpected text on button\"\n        # Кликаем по кнопке\n        button.click()\n    \n        # Ищем кнопку \"Войти\"\n        button = browser.find_element(By.CSS_SELECTOR, value=\"div[class*='userTools'] div[class*='buttonText']\")\n        # Проверяем текст на кнопке\n        assert button.text == 'Войти', \"Unexpected text on button\"\n        # Кликаем по кнопке\n        button.click()\n    \n        # Вводим правильный email\n        email = browser.find_element(By.CSS_SELECTOR, value=\"#login-email\")\n        email.click()\n        email.send_keys(\"gric.vika@mail.ru\")\n    \n        # Вводим правильный пароль\n        password = browser.find_element(By.CSS_SELECTOR, value=\"#login-password\")\n        password.click()\n        password.send_keys(\"gv8061986\")\n    \n        # Ищем кнопку \"Войти\"\n        button = browser.find_element(By.CSS_SELECTOR, value=\"button[class*='VyAyj'] div\")\n        # Проверяем текст на кнопке\n        assert button.text == 'Войти', \"Unexpected text on button\"\n        # Кликаем по кнопке\n        button.click()\n    \n        time.sleep(2)\n    \n        # Ищем поисковую строку\n        search = browser.find_element(By.CSS_SELECTOR, value=\"#catalogSearch\")\n    \n        # Находим атрибут нужного значения (перед вводом текста)\n        search_text = search.get_attribute(\"value\")\n        assert search.text == \"\", \"Unexpected attribute value\"\n    \n        # Вводим текст в строку поиска\n        search.send_keys(\"Ноутбук HP\")\n    \n        # Нажимаем кнопку enter\n        search.send_keys(Keys.ENTER)\n    \n        # Проверяем, что значение атрибута изменилось(после ввода текста)\n        search = browser.find_element(By.CSS_SELECTOR, value=\"#catalogSearch\")\n        search_text = search.get_attribute(\"value\")\n        assert search_text == \"Ноутбук HP\", \"Unexpected attribute value\"\n    \n        time.sleep(5)\n    \n        # Скролим до нужного элемента\n        element = browser.find_element(By.CSS_SELECTOR, value=\"span[class*='7770541']\")\n        browser.execute_script(\"arguments[0].scrollIntoView(true);\", element)\n    \n        # Открываем вкладку нужного товара\n        element = browser.find_element(By.CSS_SELECTOR, value=\"[data-code='8619455'] img\")\n        element.click()\n    \n        time.sleep(5)\n    \n        # Отправляем товар в корзину\n>       element = browser.find_element(By.CSS_SELECTOR, value=\"button[class*='RB62D']\")\n\ntest\\test_main.py:393: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E8C6826750>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C1662D+237]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C165FD+189]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"button[class*='RB62D']\"}\nE         (Session info: chrome=126.0.6478.114); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0139C1C3+27395]\nE       \t(No symbol) [0x01333DC4]\nE       \t(No symbol) [0x01231B7F]\nE       \t(No symbol) [0x01272C65]\nE       \t(No symbol) [0x01272D3B]\nE       \t(No symbol) [0x012AEC82]\nE       \t(No symbol) [0x012939E4]\nE       \t(No symbol) [0x012ACB24]\nE       \t(No symbol) [0x01293736]\nE       \t(No symbol) [0x01267541]\nE       \t(No symbol) [0x012680BD]\nE       \tGetHandleVerifier [0x01653A93+2876371]\nE       \tGetHandleVerifier [0x016A7F5D+3221661]\nE       \tGetHandleVerifier [0x0141D634+556916]\nE       \tGetHandleVerifier [0x0142474C+585868]\nE       \t(No symbol) [0x0133CE04]\nE       \t(No symbol) [0x01339818]\nE       \t(No symbol) [0x013399B7]\nE       \t(No symbol) [0x0132BF0E]\nE       \tBaseThreadInitThunk [0x76400419+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C1662D+237]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C165FD+189]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException"}, "description": "\n    SMK-6. Purchase of goods\n    ", "start": 1719312074032, "stop": 1719312096627, "uuid": "dcdd57a1-960a-4ad5-8993-54c464b8afb6", "historyId": "a4b2f3e9d987e2562a7c984f6f09fb1b", "testCaseId": "a4b2f3e9d987e2562a7c984f6f09fb1b", "fullName": "test.test_main#test_purchase_of_goods", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_main"}, {"name": "host", "value": "DESKTOP-GQEQM8A"}, {"name": "thread", "value": "9888-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_main"}]}